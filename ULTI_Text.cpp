#include "ULTI_Text.h"

namespace ulti{



int pairsurface(surface& sfc, std::vector<double>& pairs, ui32 color, ui32 backcolor, int thick){

    if (&sfc==0||pairs.size()%4!=0){
        return -1;
    }
    if (thick<1){
        thick=1;
    }
    sfc.clear(backcolor);

    for(int a = 0; a+3 < pairs.size(); a+=4){
        sfc.drawline((sfc.width()-1)*pairs[a],(sfc.height()-1)*pairs[a+1],
                     (sfc.width()-1)*pairs[a+2],(sfc.height()-1)*pairs[a+3],color,thick);
    }
    return 1;
}
bool strcasecmp(char* one, char* two){
    char buf = one[0];
    char bufb = two[0];
    char casedif = 'a' - 'A';
    while(buf!=NULL && bufb!=NULL){
        if (isalpha(buf)&&isalpha(bufb)){
            if (buf!=bufb && bufb-buf != 'a'-'A' && bufb-buf != 'A'-'a')
                return false;
        }
        else{
            if (buf!=bufb)
                return false;
        }
    }
    if (buf!=bufb)
        return false; //didn't terminate both strings at once
    return true;
}
char shiftval(char ch){
    if (ch>='a'&&ch<='z'){
        return toupper(ch);
    }
    if (ch>='0' && ch <='9'){
        if (ch=='1')
            return '!';
        if (ch=='2')
            return '@';
        if (ch=='3')
            return '#';
        if (ch=='4')
            return '$';
        if (ch=='5')
            return '%';
        if (ch=='6')
            return '^';
        if (ch=='7')
            return '&';
        if (ch=='8')
            return '*';
        if (ch=='9')
            return '(';
        if (ch=='0')
            return ')';
    }
    if (ch=='-')
        return '_';
    if (ch=='=')
        return '+';
    if (ch=='[')
        return '{';
    if (ch==']')
        return '}';
    if (ch==';')
        return ':';
    if (ch=='\'')
        return '"';
    if (ch==',')
        return '<';
    if (ch=='.')
        return '>';
    if (ch=='/')
        return '?';
    if (ch=='\\')
        return '|';
    if (ch=='`')
        return '~';
}

icoord charset::getdem(std::string& str){
    return icoord((this->fontsize + 3)*str.size()-3,this->fontsize);
}
void charset::setfont(int size, ui32 icolor, ui32 backcolor, int thickness){
    if (size!=fontsize||icolor!= color||backcolor!=bcolor||thickness!=thick){
        fontsize=size;
        color=icolor;
        bcolor=backcolor;
        thick=thickness;
        for (int a = 0; a < chars.size(); a++){
            chars[a].resize(fontsize,fontsize);
            pairsurface(chars[a],pairs[a],color,bcolor,thick);
        }
    }
}
void charset::writemsg(std::string msg,int tx, int ty, surface& sd, int hspacing, int vspacing, bool wordwrap){
    int ox=tx, oy=ty;
    int spacing = 1;
    int vspace = 9;
    for (int a = 0; a < msg.size(); a++){
        surface& sfc = chars[msg[a]];

        if (msg[a]=='\r' || msg[a]=='\n'){
            ox=tx;
            oy+=sfc.height()+vspacing;
        }
        else if (msg[a]=='\t'){
            ox+=sfc.width()*tabspacenum;
        }
        else{
            sfc.draw(sd,ox,oy);
            ox+=sfc.width()+hspacing;
        }
        if (wordwrap && (ox+sfc.width()>sd.width())){
            ox=tx;
            oy+=sfc.height()+vspacing;
        }
    }
}
charset::charset(){
    chars.resize(255);//would change for different character sets like utf8
    tabspacenum=3;
    pairs[' ']={

    };
    pairs['A']={
    0,1,0,.5,
    0,.5,.5,0,
    .5,0,1,.5,
    1,.5,1,1,
    0,.5,1,.5
    };
    pairs['B']={
    0,0,.5,0,
    .5,0,.5,.5,
    0,0,0,1,
    0,1,1,1,
    1,1,1,.5,
    1,.5,0,.5
    };
    pairs['C']={
    1,0,.5,0,
    .5,0,0,.5,
    0,.5,.5,1,
    .5,1,1,1
    };
    pairs['D']={
    0,0,0,1,
    0,1,.5,1,
    .5,1,1,.5,
    1,.5,.5,0,
    .5,0,0,0
    };
    pairs['E']={
    0,0,1,0,
    0,0,0,1,
    0,1,1,1,
    0,.5,.6,.5
    };
    pairs['F']={
    0,0,1,0,
    0,0,0,1,
    0,.5,1,.5
    };
    pairs['G']={
    1,0,0,0,
    0,0,0,1,
    0,1,1,1,
    1,1,1,.6,
    1,.6,.5,.6
    };
    pairs['H']={
    0,0,0,1,
    0,.5,1,.5,
    1,0,1,1
    };
    pairs['I']={
    0,0,1,0,
    0,1,1,1,
    .5,0,.5,1
    };
    pairs['J']={
    0,0,1,0,
    .75,0,.75,1,
    .75,1,0,1
    };
    pairs['K']={
    0,0,0,1,
    0,.5,.5,.5,
    .5,.5,1,0,
    .5,.5,1,1
    };
    pairs['L']={
    0,0,0,1,
    0,1,1,1
    };
    pairs['M']={
    0,1,0,0,
    0,0,1,0,
    1,0,1,1,
    .5,0,.5,1
    };
    pairs['N']={
    0,1,0,0,
    0,0,1,0,
    1,0,1,1
    };
    pairs['O']={
    0,1,0,0,
    0,0,1,0,
    1,0,1,1,
    1,1,0,1
    };
    pairs['P']={
    0,1,0,0,
    0,0,1,0,
    1,0,1,.5,
    1,.5,0,.5
    };
    pairs['Q']={
    0,1,0,0,
    0,0,1,0,
    1,0,1,1,
    0,1,.75,1,
    //.75,1,.75,.75,
    1,1,.75,.75
    };
    pairs['R']={
    0,1,0,0,
    0,0,1,0,
    1,0,1,.5,
    1,.5,0,.5,
    .5,.5,1,1

    };
    pairs['S']={
    1,0,0,0,
    0,0,0,.5,
    0,.5,1,.5,
    1,.5,1,1,
    1,1,0,1
    };
    pairs['T']={
    0,0,1,0,
    .5,0,.5,1
    };
    pairs['U']={
    0,0,0,1,
    0,1,1,1,
    1,1,1,0
    };
    pairs['V']={
    0,0,0,.5,
    0,.5,.5,1,
    .5,1,1,.5,
    1,.5,1,0
    };
    pairs['W']={
    0,0,0,1,
    0,1,1,1,
    1,1,1,0,
    .5,1,.5,.5
    };
    pairs['X']={
    0,0,1,1,
    1,0,0,1
    };
    pairs['Y']={
    0,0,0,.5,
    0,.5,1,.5,
    1,0,1,1,
    1,1,0,1
    };
    pairs['Z']={
    0,0,1,0,
    1,0,0,1,
    0,1,1,1
    };

    pairs['a']={
    0,.4,.9,.4,
    .9,.4,.9,1,
    1,1,0,1,
    0,1,0,.7,
    0,.7,.9,.7,
    };
    pairs['b']={
    0,0,0,1,
    0,1,1,1,
    1,1,1,.7,
    1,.7,0,.7,
    };
    pairs['c']={
    1,.4,0,.4,
    0,.4,0,1,
    0,1,1,1
    };
    pairs['d']={
    1,0,1,1,
    1,1,0,1,
    0,1,0,.7,
    0,.7,1,.7,
    };
    pairs['e']={
    0,.6,1,.6,
    1,.6,1,.4,
    1,.4,0,.4,
    0,.4,0,1,
    0,1,1,1
    };
    pairs['f']={
    1,0,.5,0,
    .5,0,.5,1,
    .3,.5,.7,.5
    };
    pairs['g']={
    0,1,1,1,
    1,1,1,.4,
    1,.4,.4,.4,
    .4,.4,.4,.6,
    .4,.6,1,.6
    };
    pairs['h']={
    0,0,0,1,
    0,.5,1,.5,
    1,.5,1,1
    };
    pairs['i']={
    .5,0,.5,.1,
    .5,.6,.5,1
    };
    pairs['j']={
    .5,0,.5,.1,
    .5,.4,.5,1,
    .5,1,.2,1
    };
    pairs['k']={
    0,0,0,1,
    0,.7,.5,.7,
    .5,.7,.7,.4,
    .5,.7,.8,1
    };
    pairs['l']={
    .4,0,.5,0,
    .5,0,.5,1,
    };
    pairs['m']={
    0,1,0,.4,
    0,.4,1,.4,
    1,.4,1,1,
    .5,.4,.5,1
    };
    pairs['n']={
    0,1,0,.4,
    0,.4,1,.4,
    1,.4,1,1
    };
    pairs['o']={
    0,1,0,.4,
    0,.4,1,.4,
    1,.4,1,1,
    1,1,0,1
    };
    pairs['p']={
    0,1,0,.4,
    0,.4,1,.4,
    1,.4,1,.7,
    1,.7,0,.7
    };
    pairs['q']={
    1,1,1,.4,
    1,.4,0,.4,
    0,.4,0,.7,
    0,.7,1,.7
    };
    pairs['r']={
    0,1,0,.4,
    0,.4,1,.4

    };
    pairs['s']={
    1,.4,0,.4,
    0,.4,0,.6,
    0,.6,1,.6,
    1,.6,1,1,
    1,1,0,1
    };
    pairs['t']={
    0,.5,1,.5,
    .5,0,.5,1
    };
    pairs['u']={
    0,.4,0,1,
    0,1,1,1,
    1,1,1,.4
    };
    pairs['v']={
    0,.4,0,.5,
    0,.5,.5,1,
    .5,1,1,.5,
    1,.5,1,.4
    };
    pairs['w']={
    0,.4,0,1,
    0,1,1,1,
    1,1,1,.4,
    .5,1,.5,.5
    };
    pairs['x']={
    .2,.4,.8,1,
    .8,.4,.2,1
    };
    pairs['y']={
    0,.4,0,.7,
    0,.7,1,.7,
    1,.4,1,1,
    1,1,0,1
    };
    pairs['z']={
    0,.3,1,.3,
    1,.3,0,1,
    0,1,1,1
    };

    pairs['1']={
    .5,0,.5,1,
    0,1,1,1,
    .5,0,.25,.25
    };
    pairs['2']={
    0,0,1,0,
    1,0,1,.5,
    1,.5,0,.5,
    0,.5,0,1,
    0,1,1,1
    };
    pairs['3']={
    0,0,1,0,
    1,0,1,1,
    1,1,0,1,
    1,.5,0,.5
    };
    pairs['4']={
    0,0,0,.5,
    0,.5,1,.5,
    1,0,1,1
    };
    pairs['5']={
    1,0,0,0,
    0,0,0,.5,
    0,.5,1,.5,
    1,.5,1,1,
    1,1,0,1
    };
    pairs['6']={
    1,0,0,0,
    0,0,0,1,
    0,1,1,1,
    1,1,1,.5,
    1,.5,0,.5
    };
    pairs['7']={
    0,0,1,0,
    1,0,1,1
    };
    pairs['8']={
    0,0,1,0,
    1,0,1,1,
    1,1,0,1,
    0,1,0,0,
    0,.5,1,.5
    };
    pairs['9']={
    1,.5,0,.5,
    0,.5,0,0,
    0,0,1,0,
    1,0,1,1
    };
    pairs['0']={
    0,0,1,0,
    1,0,1,1,
    1,1,0,1,
    0,1,0,0,
    0,0,1,1
    };
    pairs['+']={
    .5,0,.5,1,
    0,.5,1,.5
    };
    pairs['-']={
    0,.5,1,.5
    };
    pairs['.']={
    .4,1,.6,1,
    .6,1,.6,.8,
    .6,.8,.4,.8,
    .4,.8,.4,1
    };
    pairs[0x0]={//null
    .25,.25,.75,.75,
    .25,.75,.75,.25
    };
    pairs[0x1]={
    0,.5,1,.5,
    1,.5,.5,0,
    1,.5,.5,1
    };
    pairs[0x2]={
    0,.4,1,.4,
    0,.6,1,.6,
    0,.5,1,.5,
    1,.5,.5,0,
    1,.5,.5,1
    };
    pairs[0x3]={//end of text
    0,.5,1,.5,
    0,.5,.5,0,
    0,.5,.5,1
    };
    pairs[0x4]={//end of transmission
    0,.4,1,.4,
    0,.6,1,.6,
    0,.5,1,.5,
    0,.5,.5,0,
    0,.5,.5,1
    };
    pairs['!']={
    .5,0,.5,.5,
    .5,1,.5,1
    };
    pairs['"']={
    .4,0,.4,.2,
    .6,0,.6,.2
    };
    pairs['#']={
    .3,0,.3,1,
    .7,0,.7,1,
    0,.3,1,.3,
    0,.7,1,.7,
    };
    pairs['$']={
    1,.2,0,.2,
    0,.2,0,.5,
    0,.5,1,.5,
    1,.5,1,.8,
    1,.8,0,.8,

    .4,0,.4,1,
    .6,0,.6,1
    };
    pairs['%']={
    0,0,.2,0,
    .2,0,.2,.2,
    .2,.2,0,.2,
    0,.2,0,0,

    1,1,.8,1,
    .8,1,.8,.8,
    .8,.8,1,.8,
    1,.8,1,1,

    1,0,0,1
    };
    pairs['&']={
    .8,.2,.8,0,
    .8,0,.4,0,
    .4,0,.4,.4,
    .4,.4,1,1,
    .5,.5,.4,.6,
    .4,.6,.4,1,
    .4,1,.7,1,
    .7,1,.7,.7,
    .7,.7,.9,.5
    };
    pairs['\'']={
    .5,0,.5,.2
    };
    pairs['(']={
    .6,0,.3,.3,
    .3,.3,.3,.7,
    .3,.7,.6,1
    };
    pairs[')']={
    .4,0,.7,.3,
    .7,.3,.7,.7,
    .7,.7,.4,1
    };
    pairs['*']={
    .5,0,.5,.5,
    .3,.3,.7,.3,
    .3,0,.7,.5,
    .7,0,.3,.5
    };
    pairs[',']={
    .5,.9,.4,1
    };
    pairs['-']={
    .2,.5,.8,.5
    };
    pairs['/']={
    0,1,1,0
    };
    pairs[':']={
    .4,0,.6,0,
    .6,0,.6,.2,
    .6,.2,.4,.2,
    .4,.2,.4,0,

    .4,1,.6,1,
    .6,1,.6,.8,
    .6,.8,.4,.8,
    .4,.8,.4,1
    };
    pairs[';']={
    .4,0,.6,0,
    .6,0,.6,.2,
    .6,.2,.4,.2,
    .4,.2,.4,0,

    .5,.9,.4,1
    };
    pairs['<']={
    .75,0,.25,.5,
    .25,.5,.75,1
    };
    pairs['=']={
    0,.4,1,.4,
    0,.6,1,.6,
    };
    pairs['>']={
    .25,0,.75,.5,
    .75,.5,.25,1
    };
    pairs['?']={
    .4,.2,.4,0,
    .4,0,.7,0,
    .7,0,.7,.5,
    .7,.5,.5,.5,
    .5,.5,.5,.7,
    .5,.95,.5,1
    };
    pairs['@']={
    .6,.4,.5,.4,
    .5,.4,.5,.6,
    .5,.6,.7,.6,
    .7,.6,.7,0,
    .7,0,0,0,
    0,0,0,1,
    0,1,.8,1
    };
    pairs['[']={
    .6,0,.4,0,
    .4,0,.4,1,
    .4,1,.6,1
    };
    pairs['\\']={
    0,0,1,1
    };
    pairs[']']={
    .6,0,.4,0,
    .6,0,.6,1,
    .4,1,.6,1
    };
    pairs['^']={
    .2,.3,.5,0,
    .5,0,.8,.3
    };
    pairs['_']={
    0,1,1,1
    };
    pairs['`']={
    .4,0,.5,.1
    };
    pairs['{']={
    .5,0,.3,.2,
    .3,.2,.3,.8,
    .3,.8,.5,1,
    .2,.5,.3,.5
    };
    pairs['|']={
    .5,0,.5,1
    };
    pairs['}']={
    .5,0,.7,.2,
    .7,.2,.7,.8,
    .7,.8,.5,1,
    .7,.5,.8,.5
    };
    pairs['~']={
    .2,.6,.4,.4,
    .4,.4,.6,.6,
    .6,.6,.8,.4,
    };
}




}

